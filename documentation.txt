Next.js E-commerce - Build a Shopping Platform From Scratch


Section 01: Introduction

01. Welcome To The Course

02. The Stack

03. The Project

04. The Environment

05. Premium Docs

06. Final Code & Demo


Section 02: App Creation & Basics Layout

07. Section Intro

08. Create Next App & Assets
-preuzemo folder resources
-otvorimo web stranicu: https://nextjs.org/
-u terminalu ukucamo komandu npx create-next-app@latest .
-ukucamo komandu npm run dev 
-u komponentu layout.tsx importujemo funkciju Inter iz paketa next/font/google
-kreiramo varijablu const inter
-u jsx-u, u prop className proslijedujemo dinamicku vrijednost varijable inter
-brisemo globals.css fajl
-kreiramo folder assets
-u folder assets dodajemo starter folder styles sa globals.css fajlom i loader.gif sliku
-u komponentu layout.tsx importujemo globals.css fajl
-u komponenti app/page.tsx kreiramo i eksportujemo funkciju Homepage() kao default
-u folder app dodajemo logo favicon.ico
-u folder public dodajemo folder images

09. ShadCN UI Setup
-otvorimo web stranicu: https://ui.shadcn.com/
-u terminalu ukucamo komandu: npx shadcn@latest init
-odaberemo opciju Use --legacy-peer-deps
-nakon instalacije paketa Shadcn generisan folder lib i utils.ts fajl
-nakon instalacije paketa Shadcn generisan components.json fajl
-ukucamo komandu: npx shadcn@latest add button
-nakon instalacije komponente button generisan folderi components, ui i komponenta button.tsx
-otvorimo link: https://ui.shadcn.com/docs/react-19

10. Root Layout & Constants
-u folderu app kreiramo folder (root) i komponentu layout.tsx
-u komponenti (root)/layout.tsx kreiramo i eksportujemo funkciju RootLayout() kao default
-u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama
-u main element dodajemo prop children
-komponentu app/page.tsx premjestamo u folder (root)
-u folderu lib kreiramo folder constants i index.ts fajl
-u constants/index.ts fajlu kreiramo i eksportujemo varijable const APP_NAME, APP_DESCRIPTION i const SERVER_URL
-kreiramo .env fajl
-u .env fajlu kreiramo tri env varijable NEXT_PUBLIC_APP_NAME, NEXT_PUBLIC_APP_DESCRIPTION i NEXT_PUBLIC_SERVER_URL
-kreiramo example.env fajl u koji dodajemo primjer env varijabli koje je potrebno kreirati
-u komponentu app/layout.tsx importujemo varijable APP_NAME, APP_DESCRIPTION i SERVER_URL iz utils.ts fajla
-u eslint.config.mjs fajl dodajemo objekt rules
-uobjekt rules dodajemo opciju: @typescript-eslint/no-empty-interface": "off"

11. Header & Footer Components
-u eslint.config.mjs fajl dodajemo opciju: @typescript-eslint/no-unused-vars": "warn"
-u folderu components kreiramo foldere shared i header
-u folderu header kreiramo komponentu index.tsx
-u komponentu (root)/layout.tsx importujemo komponentu Header iz komponente header/index.tsx
-u komponenti header/index.tsx kreiramo i eksportujemo funkciju Header() kao default
-otvorimo link: https://www.npmjs.com/package/lucide-react
-u terminalu instaliramo paket Lucide React sa komandom npm i lucide-react
-u komponentu header/index.tsx importujemo React ikonice ShoppingCart i UserIcon iz paketa Lucide React
-importujemo komponentu Image iz paketa next/image
-otvorimo link: https://nextjs.org/docs/pages/api-reference/components/image
-importujemo komponentu Link iz paketa next/link
-otvorimo link: https://nextjs.org/docs/pages/api-reference/components/link
-importujemo komponentu Button iz komponente ui/button.tsx
-otvorimo link: 
-importujemo varijablu APP_NAME iz lib/constants.ts fajla
-u funkciji Header(), u jsx-u kreiramo header element kao roditelj element
-elementu header dodajemo Tailwind CSS klase w-full i border-b
-u header elementu kreiramo div element sa Tailwind CSS klasama wrapper i flex-between
-u div elementu sa klasama wrapper i flex-between kreiramo dva div elementa
-u prvi div element dodajemo komponentu Link
-komponenti Link dodajemo prop href i className
-u komponentu Link dodajemo komponentu Image i kreiramo span element
-komponenti Image dodajemo prop priority, src, width, height i alt
-span elementu dodajemo Tailwind CSS klase
-u drugi div element dodajemo dvije komponente Button
-komponentama Button dodajemo prop asChild i variant
-u komponente Button dodajemo komponente Link sa prop href
-u komponentama Link kreiramo po dva span elementa
-u prvi span element dodajemo React ikonicu, dok u drugi span element dodajemo opis
-u folderu components kreiramo komponentu footer.tsx
-u komponenti footer.tsx kreiramo i eksportujemo funkciju Footer() kao default
-u komponentu (root)/layout.tsx importujemo komponentu Footer iz komponente footer.tsx
-u komponentu footer.tsx importujemo varijablu APP_NAME iz lib/constants.ts fajla
-u funkciji Footer() kreiramo varijablu const currentYear
-u jsx-u kreiramo footer element kao roditelj element
-u footer elementu kreiramo div element sa Tailwind CSS klasama p-5 i flex-center
-u div elementu kreiramo tri span elementa
-u span elementima dinamicki prikazujemo vrijednost varijabli currentYear i APP_NAME

12. Theme Mode Toggle
-otvorimo link: https://ui.shadcn.com/docs/dark-mode/next
-otvorimo link: https://ui.shadcn.com/themes
-otvorimo link: https://www.npmjs.com/package/next-themes
-u globals.css fajl dodajemo kod iz dokumentacije za Shadcn teme
-u globals.css fajl dodajemo direktivu @layer base 
-u direktivu @layer base dodajemo objekte :root i .dark
-u terminalu ukucamo komandu: npm i next-themes
-otvorimo link: https://ui.shadcn.com/docs/components/dropdown-menu
-u terminalu ukucamo komandu: npx shadcn@latest add dropdown-menu
-u komponentu app/layout.tsx importujemo komponentu ThemeProvider iz paketa next-themes
-u jsx-u dodajemo komponentu ThemeProvider sa otvorenim i zatvorenim tagom
-komponenti ThemeProvider dodajemo prop attribute, defaultTheme, enableSystem i disableTransitionOnChange
-u komponentu ThemeProvider dodajemo prop {children}
-html roditelj elementu dodajemo atribut suppressHydrationWarning>
-u folderu components/header kreiramo komponentu mode-toggle.tsx
-u komponenti mode-toggle.tsx kreiramo i eksportujemo funkciju ModeToggle() kao default
-u komponentu header/index.tsx importujemo komponentu ModeToggle iz komponente mode-toggle.tsx
-otvorimo link: https://nextjs.org/docs/app/building-your-application/rendering/client-components
-u komponentu mode-toggle.tsx dodajemo direktivu 'use client'
-importujemo funkciju useTheme iz paketa next-themes
-u funkciji ModeToggle() pozivamo funkciju useTheme()
-vrijednost funkcije useTheme() pohranjujemo u destruktuirane varijable const { theme, setTheme }
-importujemo sest komponenti: 
DropdownMenu, DropdownMenuTrigger, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuContent i DropdownMenuCheckboxItem iz komponente ui/dropdown-menu.tsx
-importujemo komponentu Button iz komponente ui/button.tsx
-importujemo React ikonice SunIcon, Moon i SunMoon iz paketa lucide-react
-u jsx-u dodajemo komponentu DropdownMenu kao roditelj komponentu
-u komponentu DropdownMenu dodajemo komponentu DropdownMenuTrigger sa prop asChild
-u komponentu DropdownMenuTrigger dodajemo komponentu Button sa prop variant
-u komponentu Button dodajemo uslov ternarni operator theme === 'system'
-importujemo funkcije useState i useEffect iz paketa react
-u funkciji ModeToggle() pozivamo funkciju useState(false)
-vrijednost fukncije useState(false) pohranjujemo u varijable const [mounted, setMounted]
-pozivamo fuknciju useEffect()
-u funkciji useEffect() pozivamo funkciju setMounted(true)
-dodajemo uslov if (!mounted) return null
-u komponentu DropdownMenu dodajemo komponentu DropdownMenuContent sa otvorenim i zatvorenim tagom
-u komponentu DropdownMenuContent dodajemo komponentu DropdownMenuLabel sa otvorenim i zatvorenim tagom
-dodajemo komponentu DropdownMenuSeparator sa samozatvarajucim tagom
-dodajemo tri komponente DropdownMenuCheckboxItem sa otvorenim i zatvorenim tagom
-komponentama DropdownMenuCheckboxItem dodajemo prop checked i dogadaj onClick
-u prop checked proslijedujemo dinamicku vrijednost varijable theme
-u dogadaj onClick proslijedujemo fukncije () => setTheme()